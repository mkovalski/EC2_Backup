#!/usr/bin/python

import os
import argparse
import subprocess
import sys
import json
import math
import time

#Global:
VERBOSE = False
INSTANCE_ID = ''
VOLUME_ID = ''
INSTANCE_DNS = ''
SSH_FLAGS = None
METHOD = 'dd'

def set_params():
    global VERBOSE
    global VOLUME_ID
    global SSH_FLAGS
    global METHOD
    parser = argparse.ArgumentParser(description='The ec2-backup tool performs a backup of the given directory into Amazon \
                 Elastic Block Storage (EBS).  This is achieved by creating a volume of \
                      the appropriate size, attaching it to an EC2 instance and finally copying \
                       the files from the given directory into this volume.')
    parser.add_argument('-m',  choices=['dd', 'rsync'], help="Use the given method to perform the backup. Valid methods are 'dd' and 'rsync'; default is 'dd'.")
    parser.add_argument('-v', help="Use the given volume instead of creating a new one.")
    parser.add_argument('dir', help="Directory to backup")

    args = parser.parse_args()
    
    #default should use dd, rsync otherwise
    if not args.m:
        METHOD = 'dd'
    else:
        METHOD = args.m

    VOLUME_ID = args.v
    directory = args.dir

    if os.environ.get('EC2_BACKUP_VERBOSE'):
        VERBOSE = True
    else: VERBOSE = False

    if os.environ.get('EC2_BACKUP_FLAGS_SSH'):
        SSH_FLAGS = os.environ.get('EC2_BACKUP_FLAGS_SSH')

    if os.environ.get('EC2_BACKUP_FLAGS_AWS'):
        aws_flags = os.environ.get('EC2_BACKUP_FLAGS_AWS')
    else: aws_flags = None

    return (directory, aws_flags)

def verbose_print(msg):
	if (VERBOSE):
		print (msg)

def check_volume_id(vol_id, vol_size):
    #check valid volume ID
    #Move to create_volume or a check_volume?
     
    #if no volume given, return and create one
    if not vol_id:
        return False 

    verbose_print("Checking volume %s given..." % vol_id)
    
    process = subprocess.Popen("aws ec2 describe-volumes --volume-ids %s" % vol_id, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    if process.returncode != 0:
        sys.stderr.write(error)
        sys.exit(process.returncode)
    else:
        #check the size, make sure it is large enough. 
        #we can assume the output should be the same for all describe-volumes
        #command with only one volume given, and we will always give just one volume
        e = json.loads(output)
        try:
            e['Volumes'][0]['Size']
        except:
            verbose_print("Could not get the size of volume %s, exiting." % vol_id)
            sys.exit(2)

        vol_size_GiB = int(vol_size/1024000.0)
        new_vol_size = int(e['Volumes'][0]['Size'])
        if vol_size_GiB > new_vol_size:
            verbose_print("Cannot fit the backup on %s. Backup size is %s, volume size is %s. Make sure that the volume size is double the backup folder's size." %(vol_id, str(vol_size_GB/2), new_vol_size))
            sys.exit(2)
        verbose_print("Volume %s OK" %vol_id)
        return True


def check_dir(directory):
    verbose_print("Checking directory %s" % directory)
    if os.path.isdir(directory):
       	verbose_print("Directory %s OK " % directory)
        #get and return size of directory in KB 
        process = subprocess.Popen("du -s %s | cut -f1" % directory, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if process.returncode != 0:
            sys.stderr.write(error)
            sys.exit(process.returncode)

        #make sure variable can be an int
        try: 
            dir_size = int(output.strip())
        except Exception as e:
            print "Could not get directory size: \n %s\n exiting." % str(e)
            sys.exit(2)

        verbose_print("Directory is of size %sKB" % str(dir_size))
        return dir_size
    else:
        print "%s does not exits, please use a directory that exists for backup" % directory
        sys.exit(2)

def create_keypair():
    global SSH_FLAGS
    if (SSH_FLAGS == None):
        SSH_FLAGS = '-i ~/.ssh/EC2-Backup-Key.pem'

    cmd = "aws ec2 describe-key-pairs --key-name EC2-Backup-Key"
    process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()

    if (process.returncode==0 and output):
        verbose_print("EC2-Backup-Key already configured")
        return True

    if (error == "A client error (InvalidKeyPair.NotFound) occurred when calling the DescribeKeyPairs operation: The key pair 'EC2-Backup-Key' does not exist\n"):
        verbose_print("Creating new key-pair")
        cmd = "aws ec2 create-key-pair --key-name EC2-Backup-Key --query 'KeyMaterial' --output text > ~/.ssh/EC2-Backup-Key.pem"
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        if (process.returncode!=0):
            sys.stderr.write(error)
            spin_down(process.returncode)

        verbose_print("Setting new key permissions")
        cmd = "chmod 600 ~/.ssh/EC2-Backup-Key.pem"  
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        if (process.returncode!=0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        
        verbose_print("Key Pair Generated")
        return True
    else:
        verbose_print("Error generating key-pair")
        sys.stderr.write(error)
        spin_down(5)


def create_instance(aws_flags):
    global INSTANCE_ID 
    verbose_print("Creating instance to attach volume...")
    ubuntu='ami-fce3c696'
    instance_type = 't2.micro'
    
    create_keypair()
    cmd = "aws ec2 run-instances --image-id %s --instance-type %s --placement 'AvailabilityZone=us-east-1a' --key EC2-Backup-Key --output text --query 'Instances[*].InstanceId'" %(ubuntu,instance_type)
    process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    
    if (process.returncode != 0):
        sys.stderr.write(error)
        spin_down(process.returncode)
    else:
        INSTANCE_ID = output.strip('\n')
        return True

def wait_for_instance(instance_id):
    global INSTANCE_DNS
    timeout = 100
    count = 0
    delay = 5
    state = ''
    cmd = "aws ec2 describe-instances --instance-ids %s --output text --query 'Reservations[*].Instances[*].State.Name'" % instance_id

    while (state != 'running'):
        verbose_print("Waiting for instance...")
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        
        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        else:
            state = output.strip('\n')
            verbose_print("Reading state: %s" % state)

        if (count <= timeout):
            count = count + delay
        else:
            sys.stderr.write("Error: Instance Timeout")    
            spin_down(3)
        time.sleep(delay)

    verbose_print("Instance Ready, Retrieving Public DNS name")
    cmd = "aws ec2 describe-instances --instance-ids %s --output text --query 'Reservations[*].Instances[*].PublicDnsName'" % instance_id

    process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    
    if (process.returncode != 0):
        sys.stderr.write(error)
        spin_down(process.returncode)
    else:
        INSTANCE_DNS = output.strip('\n')
        verbose_print("Instance DNS Name: %s" %INSTANCE_DNS)
        if not INSTANCE_DNS:
            sys.stderr.write("Cannot Retrieve Public DNS Name")
            spindown(6)
    return True

def wait_for_volume(volume_id):
    timeout = 100
    count = 0
    delay = 5
    state = ''
    cmd = "aws ec2 describe-volumes --volume-ids %s --output text --query 'Volumes[*].State'" % volume_id

    while (state != 'available'):
        verbose_print("Waiting for Volume ID %s ..."%volume_id)
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        else:
            state = output.strip('\n')
            verbose_print("Reading state: %s" % state)

        if (count <= timeout):
            count = count + delay
        else:
            sys.stderr.write("Error: Volume Timeout")    
            spin_down(4)
        time.sleep(delay)

    verbose_print("Volume Ready")
    return True
    
def wait_for_connect():
    timeout = 45
    count = 0
    delay = 10

    verbose_print("Attempting to ssh to instance")
    cmd ='ssh -oStrictHostKeyChecking=no %s ubuntu@%s \"uname -a\"'%(SSH_FLAGS,INSTANCE_DNS)
    process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    while (process.returncode != 0):
        time.sleep(delay)

        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (count<=timeout):
            count = count + delay
        else:
            sys.stderr.write(error)
            spin_down(7)
    
    verbose_print("Connected: %s"%output.strip('\n'))
    return True

def wait_for_attach():
    timeout = 30
    count = 0
    delay = 5
    state = ''
    cmd = "aws ec2 describe-volumes --volume-ids %s --output text --query 'Volumes[*].Attachments[*].State'" % VOLUME_ID

    while (state != 'attached'):
        verbose_print("Waiting for Volume to Attach")
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        else:
            state = output.strip('\n')
            verbose_print("Reading state: %s" % state)

        if (count <= timeout):
            count = count + delay
        else:
            sys.stderr.write("Error: Volume Attach Timeout")    
            spin_down(4)
        time.sleep(delay)

    verbose_print("Volume Attached")
    return True
 

def create_volume(vol_size): 
    global VOLUME_ID
    vol_id = ""
    vol_size = int(math.ceil(vol_size / 1024000.0))
    verbose_print("Creating volume of size %sGiB" % str(vol_size))
    if vol_size < 1:
        vol_size = 1
    cmd =  'aws ec2 create-volume --availability-zone us-east-1a --size %s --output text --query VolumeId'%str(vol_size) 
    
    process = subprocess.Popen(cmd , stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    vol_id = output.strip('\n')
    verbose_print("create-volume executed: %s"%vol_id) 

    if (process.returncode != 0):
        sys.stderr.write(error)
        spin_down(process.returncode)
    else:
        return vol_id

def attach_volume(volume_id):
    wait_for_volume(volume_id)
    wait_for_instance(INSTANCE_ID)
    verbose_print("Attaching Volume to Instance")
    cmd = "aws ec2 attach-volume --volume-id %s --instance-id %s --device /dev/sdf"%(volume_id,INSTANCE_ID)
    process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()

    if (process.returncode != 0):
        sys.stderr.write(error)
        spin_down(process.returncode)
    
    wait_for_attach()
    return True
    
def mount_volume():
    wait_for_connect()
    verbose_print("Mounting Volume to Instance")
    #Check for filesystem
    verbose_print("Checking for filesystem")
    cmd = "ssh -oStrictHostKeyChecking=no %s ubuntu@%s \"blkid /dev/sdf\""%(SSH_FLAGS, INSTANCE_DNS)
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (output, error) = process.communicate()
    if (process.returncode != 0):
        verbose_print("Error on checking for fs")
        sys.stderr.write(error)
        spin_down(process.returncode)
    
    #Create filesystem if needed
    if (output.strip('\n') == ''):
        verbose_print("Making filesystem")
        cmd = "ssh -oStrictHostKeyChecking=no %s ubuntu@%s \"sudo mkfs -t ext4 /dev/sdf\""%(SSH_FLAGS, INSTANCE_DNS)
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()
        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        
    #Mount
    verbose_print("Mounting")
    cmd = "ssh -oStrictHostKeyChecking=no %s ubuntu@%s \"sudo mkdir /mnt/backup; sudo mount /dev/sdf /mnt/backup\""%(SSH_FLAGS, INSTANCE_DNS)



def launch_backup(directory, method, ssh_flags):
    wait_for_connect()
    #Do dd or rsync
    if (method == 'dd'):
        verbose_print("Launching dd backup")
        cmd = "tar -cvf - %s | ssh  -oStrictHostKeyChecking=no %s ubuntu@%s \"sudo dd of=/dev/sdf conv=block bs=64k\"" %(directory,ssh_flags,INSTANCE_DNS)
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
    
    #Rsync    
    else:
        verbose_print("Launching rsync backup")
        cmd = "rsync --rsync-path\"sudo rsync\" -e \"ssh -oStrictHostKeyChecking=no %s\" -a %s ubuntu@%s:/mnt/backup" %(ssh_flags,directory,INSTANCE_DNS)
        process = subprocess.Popen(dd_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (process.returncode != 0):
            sys.stderr.write(error)
            spin_down(process.returncode)
        
    return True

def spin_down(exitcode=None):
    #Clean up - shutdown instances and such
    if exitcode==None:
        exitcode = 0
    verbose_print("Cleaning up w/ error code: %s"%str(exitcode))
    #unmount
    if ((VOLUME_ID.strip() != '') and (INSTANCE_ID.strip() != '') and (METHOD == 'rsync')):
        verbose_print("Unmounting device")
        cmd = 'ssh -oStrictHostKeyChecking=no %s ubuntu@%s \"sudo umount -d /dev/sdf\"'%(SSH_FLAGS,INSTANCE_DNS)
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (process.returncode != 0):
            sys.stderr.write(error)

    if (VOLUME_ID.strip() != ''):
        verbose_print("Detaching Volume ID %s"%VOLUME_ID)
        cmd = 'aws ec2 detach-volume --volume-id %s'%VOLUME_ID
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (process.returncode != 0):
            sys.stderr.write(error)

    if (INSTANCE_ID.strip() != ''):
        verbose_print("Terminating Instance ID %s"%INSTANCE_ID)
        cmd = 'aws ec2 terminate-instances --instance-ids %s'%INSTANCE_ID
        process = subprocess.Popen(cmd ,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (output, error) = process.communicate()

        if (process.returncode != 0):
            sys.stderr.write(error)

    sys.exit(exitcode)

def main():
    global VOLUME_ID
    directory = ''

    #EC2_BACKUP_FLAGS_AWS
    aws_flags = None
    #return code for program
    exit_code = 0
    #directory size
    dir_size = 0

    #params set
    (directory, aws_flags) = set_params()
    
    dir_size = check_dir(directory)     
    if not check_volume_id(VOLUME_ID, dir_size):
        VOLUME_ID = create_volume(dir_size*2)
    create_instance(aws_flags)
    attach_volume(VOLUME_ID)
    if (METHOD=='rsync'):
        mount_volume()
    launch_backup(directory,METHOD,SSH_FLAGS)
    spin_down(0)
    print VOLUME_ID

if __name__ == "__main__":
    main()

